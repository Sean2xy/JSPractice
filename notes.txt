DAY 1:

HTML -> nouns
CSS -> adjectives
JS -> verbs

hover 悬停

ES6 - 2015 modern JavaScript

camelCase -> firstLowerSecondUpperCase

Seven primitive data type: Number, String, Boolean, Undefined, Null, Symbol, BigInt

dynamic typing,value has type while variable not

let can be reassigned, while const can not be changed and const must be initalizied

// using const by default

template literal to simplify the string

Day 2:
// always use === by default
// === does not perform type coreation but == does
// expression && statement
// expression produces value, while statment is like a full sentence such as if statement
// function makes dry code,reusable,maintainable

Day 3:
operator precedence -》. member access > computed member access []
for loop using let because it will update
array is a type of object

solving problem :
Stay clam and be logical
1: Ask the right question to get a clear pic about problem
2: Divide and conquer, break into small sub-problems
3: Research: Google, github issues
4: write psedudo code for bigger problems

Always be passion and curiosity about how everything works
bugs: identify -> find -> fix > prevent
debugger google chrome

!Tab
html -> class id attribute element, id has to be unique
mostly use class
// form is more meaning ful than div because seo
using the most appropriate html element is the meaning of semantic html

Day4:
Css中 # ID 和 . class
Css box = content,padding,border,margin and fill area

Dom has head and body, special object that is the entry point to the DOM
Dom methods are part of web apis, can interact with JS
add event listener this function will be called as soon as the event happens

refactor code using function and 三元组
避免重复相同行的代码的时候，消除冗余的代码

day5:
garbage collection between low level programming langugage like C
high level programming langugage like JS
first class function: functions are treated as variables
JS runs in one single thread
Just in time compilation
One global execution context -> default context,
Execution context = environment in which a piece of js code is executed
has variable env ,scope chain and this keyword
execution contexts are used in call stack

lexcial scope: scope is controlled by the placement of the function

only let and const has block scope

scope chain -> inner ,outer, global
only upwards, not for sibling

scope chain order in which functions are written in the code,
does not influenced by the function call order

let and const can not be hosited, are block scope and TDZ
function expressions and arrows are depent on using var or let/const
TDZ makes it easier to avoid and catch errors

this keyword for every execution context, takes the
value of points to the owner of the function in which the this
keyword is used
arrow function does not have this keyword

const is immutable only for primitive types data
primitive type are stored in the call stack, with address and value
object type are stored in the call stack and heap, value has a reference to the memory address in heap

day 6:
for of loop
using optional chaining ?. with ?? nullish

Sources of data includes :
1: program itself,from the ui (DOM), from external sources (api)
array sets, objects maps
web api -> json -> object in JS


day7:
functions
Js only has pass by value, such as pass a reference to the function when dealing with object
functions are objects
HOF such as addEventListener , as a call back function
functions that returns a function
call back allows abstraction

closures: has high priority than scope chain
/ reverse mutates the origin array

day 8:
forEach loop order is element,index and array, can not use break and continue

HTML DOM operation:insertAdjacentHTML, innerHTML, after begin
map function return a new array
filter function returns a new array based on condition
reduce used for returning into single value
modern js is coming to functional programming using call back
for each for performing side effects
// for number to rewrite compareFn using built in

day9:
reminder
setTimeout call back function only executes once

DOM is a very complext API, containing a lots of properties and methods to intreact with DOM tree
DOM node has four types, element, text, comment, document, eventtarget
DOM element is unique
Event propogation
1 capturing 2 target 3 bubbling

day10:
DOM lifecycle:
DOM content loaded (html parsed and DOM tree built) => load event => before unload
script loading in head (x can not do it) and body end (parsing html first, then fetch script and execute)
script defer is better than async when it comes to the head

oop in JS
class is a blue print, instances are actual objects
objects are linked to a prototype, behavior is delegated to the linked prototype object
such as Array.prototype.map()
1 constructor function, 2 ES6 classes synatax sugar 3 Object.create()
classes are not hosited, are also first class citizen, just a speical type of function
class are executed in strict code

https://www.bilibili.com/video/BV1vA4y197C7?p=194&vd_source=318b40dbb80ee15c2068c873562385b0

day11:
Array.from() method is a static method, only availiable on constructor
// // how new wokrs
// // 1. new {} is created
// // 2. function is called, tihs ={}
// // 3. {}linked to prototype
// // 4. function automatically return {}

How to develop :
1: User stories (who what why)
2: Features
3: FlowChart
4: Architecture

day 12:
Asynchrounous code is executed after a task that runs in the background finishes
Asynchronous code is non-blocking, Execution does not wait for an asynchronous task to finish its work
not happend in the same time
Call back foundation does not make code asynchronous
addEventListener does not automitaclly make code asynchrounous

AJAX - Asynchorouns JS and XML
API: allow applications to talk to each other, piece of software, DOM, Geolocation, Own Class , Web API
API uses JSON data format (js object but just converts to a string)

What happens when we access a web server:
1: DNS 2: TCP/IP socket connection
3 (header,start line, request/responce body): HTTP REQUEST (method)
4: HTTP RESPONSE (status code) 5: index.html is the first to be loaded
Scanned for assets JS, CSS, images Process is repeated for each file

// sequence of AJAX call
// nested call backs
// when have lots of, call back hell
// using Promise to solve call back hell

promise: A container for a future value, A placeholder for the future result of an asynchronus operation
no longer rely on events and callbacks passed into asynchrounous function
we can chain promises for a sequence of asynchrouns operation, avoid call back hell
Promise lifecycle:  pending (async task)->settled (fulfilled,rejected)
is only settled once

.then function use to handle fulfiled or rejected on promise, taking a call back

event loop: (JS engine(heap,call stack), web apis(dom,fetch,timer),call back and microtask queue)
JavaScript是一种单线程执行的语言 one thread of execution
单线程也意味着JavaScript在执行长时间运行的任务时可能会阻塞用户界面和其他脚本的执行。
为了解决这个问题，JavaScript和它的运行环境提供了异步编程的能力。(concurrency model)
异步编程允许JavaScript在等待某些操作（如网络请求、I/O操作）的完成时继续执行其他代码，
而不是停滞在一个操作上。这是通过事件循环、回调函数、Promise、async/await等机制实现的。
Steps:
执行栈（Execution Stack）：当一个JavaScript脚本开始执行时，它首先会处理所有同步代码。这些代码片段被放置在执行栈中，按顺序执行。
Web API/Node.js API：当遇到异步操作（如setTimeout、网络请求等）时，这些操作会被浏览器或Node.js的API接管，从而不会阻塞执行栈中的其他代码。
微任务队列（Microtask Queue）：除了常规的任务队列，还有一个微任务队列，
用于处理微任务（如Promise的回调）。在每次执行栈为空，并且在执行下一个任务之前，
事件循环都会先处理所有的微任务。这确保了微任务比常规的宏任务（如setTimeout的回调）有更高的优先级和更快的响应时间
任务队列（call back Queue）：异步操作完成后，相应的回调函数会被放入任务队列（也称为消息队列或事件队列）。任务队列存储了所有待执行的回调函数。
事件循环：事件循环的角色是监控执行栈和任务队列。如果执行栈为空，事件循环会从任务队列中取出一个任务（回调函数）并放入执行栈中执行。

console.log('Test start');
setTimeout(()=>console.log('zero timer'),0);
Promise.resolve('Resolve promise1').then(res=>console.log(res));
console.log('test end');;
// test start, end,resolve promise1, zero timer

day13:
async, await
async returns a promise object
await equals to then