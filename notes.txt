DAY 1:

HTML -> nouns
CSS -> adjectives
JS -> verbs

hover 悬停

ES6 - 2015 modern JavaScript

camelCase -> firstLowerSecondUpperCase

Seven primitive data type: Number, String, Boolean, Undefined, Null, Symbol, BigInt

dynamic typing,value has type while variable not

let can be reassigned, while const can not be changed and const must be initalizied

// using const by default

template literal to simplify the string

Day 2:
// always use === by default
// === does not perform type coreation but == does
// expression && statement
// expression produces value, while statment is like a full sentence such as if statement
// function makes dry code,reusable,maintainable

Day 3:
operator precedence -》. member access > computed member access []
for loop using let because it will update
array is a type of object

solving problem :
Stay clam and be logical
1: Ask the right question to get a clear pic about problem
2: Divide and conquer, break into small sub-problems
3: Research: Google, github issues
4: write psedudo code for bigger problems

Always be passion and curiosity about how everything works
bugs: identify -> find -> fix > prevent
debugger google chrome

!Tab
html -> class id attribute element, id has to be unique
mostly use class
// form is more meaning ful than div because seo
using the most appropriate html element is the meaning of semantic html

Day4:
Css中 # ID 和 . class
Css box = content,padding,border,margin and fill area

Dom has head and body, special object that is the entry point to the DOM
Dom methods are part of web apis, can interact with JS
add event listener this function will be called as soon as the event happens

refactor code using function and 三元组
避免重复相同行的代码的时候，消除冗余的代码

day5:
garbage collection between low level programming langugage like C
high level programming langugage like JS
first class function: functions are treated as variables
JS runs in one single thread
Just in time compilation
One global execution context -> default context,
Execution context = environment in which a piece of js code is executed
has variable env ,scope chain and this keyword
execution contexts are used in call stack

lexcial scope: scope is controlled by the placement of the function

only let and const has block scope

scope chain -> inner ,outer, global
only upwards, not for sibling

scope chain order in which functions are written in the code,
does not influenced by the function call order

let and const can not be hosited, are block scope and TDZ
function expressions and arrows are depent on using var or let/const
TDZ makes it easier to avoid and catch errors

this keyword for every execution context, takes the
value of points to the owner of the function in which the this
keyword is used
arrow function does not have this keyword

const is immutable only for primitive types data
primitive type are stored in the call stack, with address and value
object type are stored in the call stack and heap, value has a reference to the memory address in heap

day 6:
for of loop
using optional chaining ?. with ?? nullish

Sources of data includes :
1: program itself,from the ui (DOM), from external sources (api)
array sets, objects maps
web api -> json -> object in JS


day7:
functions
Js only has pass by value, such as pass a reference to the function when dealing with object
functions are objects
HOF such as addEventListener , as a call back function
functions that returns a function
call back allows abstraction

closures: has high priority than scope chain
/ reverse mutates the origin array
